/*
 * Copyright (C) 2017. OpenLattice, Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * You can contact the owner of the copyright at support@openlattice.com
 */

plugins {
  id 'application'
  id 'java'
  id 'eclipse'
  id 'idea'
  id 'jacoco'
}

description = "Neuron Server"
group = "com.OpenLattice"
ext.projectName = "neuron"
ext.scmUrl = 'scm:git:https://github.com/openlattice/neuron.git'
ext.connectionUrl = 'scm:git:https://github.com/openlattice/neuron.git'
ext.developerConnectionUrl = 'scm:git:https://github.com/openlattice/neuron.git'

distTar {
  archiveName "$baseName" + ".tgz"
}

apply from: "https://raw.githubusercontent.com/openlattice/gradles/master/openlattice.gradle"

mainClassName = "com.openlattice.neuron.NeuronServer"

def N_XMS = "$System.env.NEURON_XMS"
def N_XMX = "$System.env.NEURON_XMX"
def N_ARGS = "$System.env.NEURON_ARGS"

if( N_XMS == 'null' || N_XMS == null || N_XMS == "" ) {
    N_XMS = '-Xms1g'
}

if( N_XMX == 'null' || N_XMX == null || N_XMX == "" ) {
    N_XMX = '-Xms4g'
}

if( N_ARGS == 'null' || N_ARGS == null || N_ARGS == "" ) {
    N_ARGS = 'local cassandra'
}

println "Using java args for running ${projectName}: Xms=" + N_XMS + ",Xmx=" + N_XMX + " -server"

applicationDefaultJvmArgs = [N_XMS, N_XMX, "-server"]
sourceCompatibility=JavaVersion.VERSION_1_8
targetCompatibility=JavaVersion.VERSION_1_8

run {
    if( N_ARGS != null ) {
        args N_ARGS.split();
    } else if(System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
}

println "Enabled profiles: " + Arrays.toString(run.args)

configurations {
    tests
      published.extendsFrom tests, archives
}

ext.odata_version='4.2.0'
dependencies {

    if ( project.hasProperty('developmentMode') && project.developmentMode ) {
        logger.quiet(project.name + " using project dependencies.")
        compile project(":conductor-client")
        compile project(":api")
        compile project(":rhizome")
        testCompile( project(path: ":api", configuration: "tests"))
        testCompile( project(path: ":rhizome", configuration: "tests"))
    } else {
        logger.quiet(project.name + " using jar dependencies.")
        compile "com.openlattice:conductor-client:${conductor_client_version}"
        compile "com.openlattice:api:${api_version}"
        compile "com.openlattice:rhizome:${rhizome_version}"

        testCompile "com.openlattice:api:${api_version}:tests"
        testCompile "com.openlattice:rhizome:${rhizome_version}:tests"
    }

    compile group: 'com.datastax.cassandra', name: 'cassandra-driver-core', version: "${cassandra_driver_version}"
    compile "org.apache.olingo:odata-server-api:${odata_version}"
    compile "org.apache.olingo:odata-server-core:${odata_version}"
    compile "org.apache.olingo:odata-commons-api:${odata_version}"
    compile "org.apache.olingo:odata-commons-core:${odata_version}"

    /*
     * TESTING
     */
    testCompile "junit:junit:${junit_version}"
    testCompile "org.cassandraunit:cassandra-unit:3.1.1.0"
    testCompile( "org.mockito:mockito-all:${mockito_version}" ) {
        exclude module : 'hamcrest'
        exclude module : 'hamcrest-core'
    }
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true

    ext.sourceCompatibility=JavaVersion.VERSION_1_8
    ext.targetCompatibility=JavaVersion.VERSION_1_8
}
